Restaurant: Create a class called "Dish" that represents a dish. The class should have properties such as name, ingredients, and price, and methods such as getName, getIngredients, and getPrice. Create another class called "Restaurant" that represents a restaurant. The class should have a list of dishes, and methods such as addDish, removeDish, and getTotalCost      complete this code









import java.util.Arrays;
import java.util.Scanner;

public class Dish {
    private String dish_name;
    private String ingredients;
    private double dish_price;

    public Dish(String name, String ingredients, double price) {
        this.dish_name = name;
        this.ingredients = ingredients;
        this.dish_price = price;
    }

    public String getName() {
        return dish_name;
    }

    public String getIngredients() {
        return ingredients;
    }

    public double getPrice() {
        return dish_price;
    }
}

public class Restaurent {
    private Dish[] dishes;
    private int numOfDishes;

    public Restaurent() {
        this.dishes = new Dish[10];
        this.numOfDishes = 0;
    }

    public void addDish(Dish dish) {
        if (numOfDishes == dishes.length) {
            // If the array is full, double its size
            dishes = Arrays.copyOf(dishes, dishes.length * 2);
        }
        dishes[numOfDishes] = dish;
        numOfDishes++;
    }

    public void removeDish(Dish dish) {
        int index = -1;
        for (int i = 0; i < numOfDishes; i++) {
            if (dishes[i].equals(dish)) {
                index = i;
                break;
            }
        }
        if (index >= 0) {
            // Shift elements to fill the gap left by the removed dish
            for (int i = index; i < numOfDishes - 1; i++) {
                dishes[i] = dishes[i + 1];
            }
            dishes[numOfDishes - 1] = null;
            numOfDishes--;
        }
    }

    public double getTotalCost() {
        double totalCost = 0;
        for (int i = 0; i < numOfDishes; i++) {
            totalCost += dishes[i].getPrice();
        }
        return totalCost;
    }

    public Dish[] getDishes() {
        return Arrays.copyOf(dishes, numOfDishes);
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Restaurent restaurant = new Restaurent();

        boolean exit = false;
        while (!exit) {
            System.out.println("Welcome to the SKDMN restaurant menu!\n"
                    + "1. View all dishes\n"
                    + "2. Add a new dish\n"
                    + "3. Remove a dish\n"
                    + "4. View total cost of all dishes\n"
                    + "0. Exit");
            System.out.println("enter your choice ...!");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume the newline character

            switch (choice) {
                case 1:
                    System.out.println("Current dishes in the menu:");
                    for (Dish dish : restaurant.getDishes()) {
                        System.out.println("- " + dish.getName());
                    }
                    break;
                case 2:
                    System.out.println("Enter the name of the dish:");
                    String name = scanner.nextLine();

                    System.out.println("Enter the ingredients:");
                    String ingredients = scanner.nextLine();

                    System.out.println("Enter the price:");
                    double price = scanner.nextDouble();

                    restaurant.addDish(new Dish(name, ingredients, price));
                    System.out.println("Dish added to the menu.");
                    break;
                case 3:
                    System.out.println("Enter thename of the dish to remove:");
                    String dishName = scanner.nextLine();
                    boolean removed = false;
                    for (Dish dish : restaurant.getDishes()) {
                        if (dish.getName().equals(dishName)) {
                            restaurant.removeDish(dish);
                            System.out.println("Dish " + dish.getName() + " removed from the menu.");
                            removed = true;
                            break;
                        }
                    }
                    if (!removed) {
                        System.out.println("Dish " + dishName + " not found in the menu.");
                    }
                    break;
                case 4:
                    System.out.println("Total cost of all dishes: " + restaurant.getTotalCost());
                    break;
                case 0:
                    System.out.println("Thank you for visiting our restaurant. Goodbye!");
                    exit = true;
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }

            System.out.println();
        }

        scanner.close();
    }
}


Library Management System: Create classes for "Book" and "Author" that represent books and authors in a library. The Book class should have properties such as title, author, ISBN, and publisher, and methods such as getTitle, getAuthor, and setAuthor. The Author class should have properties such as name, email, and a list of books, and methods such as getName, getEmail, and addBook.

